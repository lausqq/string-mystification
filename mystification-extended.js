String.prototype._getSupportedCharacters = function(){ return " \t\r\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzàèéìòùÀÈÉÌÒÙабвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ0123456789.,:;!?\"\'\`/|\\()[]{}&~*#<>@%_-+=$€%£^".split(""); };
String.prototype._checkForInvalidCharacters = function(){ this.valueOf().split("").forEach(v=>{if(String.prototype._getSupportedCharacters().indexOf(v)===-1){throw TypeError(`"${v}" is not a supported character.`)}})};
String.prototype._stringValue = function(){ const key = this.valueOf(); if (key.length <= 20){ const supportedCharacters = String.prototype._getSupportedCharacters(), len = supportedCharacters.length - 1, indexes = key.split("").map(v => {return supportedCharacters.indexOf(v)+1}), unique = Number(indexes.reduce((a,b)=> String(a) + String(b) )); const reduce = (a,b) => { let c=[]; while(a>=b) { a/=b; c.push(a) } return Math.floor(c.reduce((a,b)=>a+b)+a) }; let count = unique; while (count >= len) {count = reduce(count,len) } const final = Math.abs(unique-count); return Math.floor(count) }};
String.prototype.format = function(){const string = this.valueOf(); string._checkForInvalidCharacters(); return string.normalize()};
String.prototype._returnNewArray = function(){const string = this.valueOf(); let keyNumberValue = string._stringValue(); if (typeof keyNumberValue!=="undefined"&&typeof Number(keyNumberValue)==="number") { const supportedCharacters = String.prototype._getSupportedCharacters(); keyNumberValue = Number(keyNumberValue); while (keyNumberValue>=supportedCharacters.length) { keyNumberValue=Math.abs(keyNumberValue-supportedCharacters.length+1) } return [...supportedCharacters.slice(keyNumberValue,supportedCharacters.length-1),...supportedCharacters.slice(0,keyNumberValue)] }};
String.prototype.encode = function(key){ let string = this.valueOf(); if ( typeof key !== "undefined" ) { string = string.format(); key = key.format(); const newCharactersArray = key._returnNewArray(), supportedCharacters = String.prototype._getSupportedCharacters(), result = string.split("").map( v => newCharactersArray[ supportedCharacters.indexOf( v ) ] ).join(""); return { result: result, signature: key.split("").map( v => newCharactersArray[ supportedCharacters.indexOf( v ) ] ).join("") } }};
String.prototype.decode = function(key,signature){ let newCharactersArray, string = this.valueOf(); if ( typeof key !== "undefined" && typeof signature !== "undefined" ) { string = string.format(); key = key.format(); signature = signature.format(); newCharactersArray = key._returnNewArray(); const supportedCharacters = String.prototype._getSupportedCharacters(), decodedSignature = signature.split("").map( v => supportedCharacters[ newCharactersArray.indexOf( v ) ] ).join(""); if ( decodedSignature === key ) { return string.split("").map( v => supportedCharacters[ newCharactersArray.indexOf( v ) ] ).join("") } else { console.error("The signature doesn't match the key!") }}};
String.prototype.hex2num = function(){const hex = this.valueOf(); if (typeof hex=="string"&&!isNaN(parseInt(hex,16))) {let arrBuff=new ArrayBuffer(4), vw=new DataView(arrBuff); vw.setUint32(0,parseInt(hex,16),false); const arrByte=new Uint8Array(arrBuff).slice(1), num=[...arrByte]; return num[2] }};
String.prototype.hex2string = function(){ let text = this.valueOf(); const spaces = ""; if (typeof text == "string") { const chars = String.prototype._getSupportedCharacters(); text = text.match(/.{1,2}/g); text = text.map(v => { return chars[v.hex2num()] }); return text.join("") }};
String.prototype.string2hex = function(){ let text = this.valueOf(); const spaces = ""; const chars = String.prototype._getSupportedCharacters(); text = text.split("").map( v => { const hex = chars.indexOf(v).toString(16); return hex.length < 2 ? "0" + hex : hex }); return text.join(spaces) };
String.prototype.hexEncode = function(key,times){ let string = this.valueOf(); if ( typeof key !== "undefined" ) { times = typeof times !== "undefined" ? times : 1; const res = string.encode( key ); for (let i = 0; i < times; i++) { res.result = res.result.string2hex(); res.signature = res.signature.string2hex() } return res }};
String.prototype.hexDecode = function(key,signature,times){ let string = this.valueOf(); if ( typeof key !== "undefined" && typeof signature !== "undefined" ) { const res = { result: string.hex2string(), signature: signature.hex2string() }; times = typeof times !== "undefined" ? times : 1; for (let i = 0; i < times - 1; i++) { res.result = res.result.hex2string(); res.signature = res.signature.hex2string(); } return res.result.decode( key, res.signature ) }};